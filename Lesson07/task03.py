"""
Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
    сложение (​__add__())​,
    вычитание (​__sub__())​,
    умножение (​__mul__())​,
    деление (​__truediv__())​.
Данные методы должны применяться т​олько к клеткам и выполнять увеличение,
уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В методе деления должно осуществляться округление значения до целого числа.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида*****\n*****\n*****...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
"""


class Cell:
    def __init__(self, quantity=1):
        self.quantity = quantity

    def __str__(self):
        return '*' * self.quantity

    def __add__(self, other):
        """
        Количество ячеек в клетках сумируется.
        Исходные экземпляры остаются без изменения.
        :param other:
        :return: Возвращает суммарное значение ячеек в двух клетках
        """
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other):
        """
        Количество ячеек в клетках вычитается.
        Если клетки равны, операция невозможна.
        Исходные экземпляры остаются без изменения.
        :param other:
        :return: Возвращает разницу ячеек в двух клетках
        """
        if abs(self.quantity - other.quantity) == 0:
            print('Вычитание невозможно т.к. клетки равны')
        else:
            return Cell(abs(self.quantity - other.quantity))

    def __mul__(self, other):
        """
        Количество ячеек в клетках перемножается.
        Исходные экземпляры остаются без изменения.
        :param other:
        :return: Возвращает произведение ячеек в двух клетках
        """
        return Cell(self.quantity * other.quantity)

    def __truediv__(self, other):
        """
        Количество ячеек в клетках делится.
        Исходные экземпляры остаются без изменения.
        :param other:
        :return: Возвращает значение итог целочисленного деления ячеек в двух клетках
        """
        if self.quantity > other.quantity:
            return Cell(self.quantity // other.quantity)
        else:
            return Cell(other.quantity // self.quantity)

    def make_order(self, number):
        """
        Делит клетку на части, состоящие из количества элементов, передаваемых в качестве аргумента
        :param number:
        :return:
        """
        if number != 0:
            res = ''.join([(lambda i: '*\n' if i % number == 0 else '*')(i) for i in range(1, self.quantity + 1)])
            print(res)


c1 = Cell(5)
c2 = Cell(7)
c3 = Cell(24)
print(f'Сумма: {c1 + c2}')
print(f'Вычитание: {c1 - c2}')
print(f'Умножение: {c1 * c2}')
print(f'Деление: {c3 / c2}')
c3.make_order(7)
